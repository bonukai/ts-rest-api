// This file was generated by typescript-routes-to-openapi

import express, { RequestHandler, Router } from 'express';
import Ajv from 'ajv';
import { ValidationError } from 'typescript-routes-to-openapi/server';

const ajv = new Ajv({
  allErrors: true,
  coerceTypes: true,
  verbose: true,
  removeAdditional: true,
});

const validatorHandler = (args: {
  pathParamsSchema?: any;
  requestQuerySchema?: any;
  requestBodySchema?: any;
}): RequestHandler => {
  const { pathParamsSchema, requestQuerySchema, requestBodySchema } = args;

  const pathParamsValidator = pathParamsSchema && ajv.compile(pathParamsSchema);
  const requestQueryValidator =
    requestQuerySchema && ajv.compile(requestQuerySchema);
  const requestBodySchemaValidator =
    requestBodySchema && ajv.compile(requestBodySchema);

  return (req, res, next) => {
    if (pathParamsValidator && !pathParamsValidator(req.params)) {
      next(
        new ValidationError(
          pathParamsValidator.errors,
          ajv.errorsText(pathParamsValidator.errors, {
            dataVar: 'Path params',
          })
        )
      );
    } else if (requestQueryValidator && !requestQueryValidator(req.query)) {
      next(
        new ValidationError(
          requestQueryValidator.errors,
          ajv.errorsText(requestQueryValidator.errors, {
            dataVar: 'Query string',
          })
        )
      );
    } else if (
      requestBodySchemaValidator &&
      !requestBodySchemaValidator(req.body)
    ) {
      next(
        new ValidationError(
          requestBodySchemaValidator.errors,
          ajv.errorsText(requestBodySchemaValidator.errors, {
            dataVar: 'Request body',
          })
        )
      );
    } else {
      next();
    }
  };
};

import { PetController } from '../src/pet_controller';

const _PetController = new PetController();

const router: Router = express.Router();

router.get(
  '/pets',
  validatorHandler({
    requestQuerySchema: {
      $schema: 'http://json-schema.org/draft-07/schema#',
      type: 'object',
      properties: {
        tags: {
          description: 'tags to filter by',
          type: ['array', 'null'],
          items: { type: 'string' },
        },
        limit: {
          description: 'maximum number of results to return',
          type: ['number', 'null'],
        },
      },
    },
  }),
  _PetController.findPets
);
router.post(
  '/pets',
  validatorHandler({
    requestBodySchema: {
      $schema: 'http://json-schema.org/draft-07/schema#',
      definitions: {
        NewPet: {
          type: 'object',
          properties: {
            name: { type: 'string' },
            tag: { type: ['string', 'null'] },
          },
          required: ['name'],
        },
      },
      $ref: '#/definitions/NewPet',
    },
  }),
  _PetController.addPet
);
router.get(
  '/pets/:id',
  validatorHandler({
    pathParamsSchema: {
      type: 'object',
      properties: { id: { description: 'ID of pet to fetch', type: 'number' } },
      required: ['id'],
      nullable: false,
    },
  }),
  _PetController.findPetById
);
router.delete(
  '/pets/:id',
  validatorHandler({
    pathParamsSchema: {
      type: 'object',
      properties: {
        id: { description: 'ID of pet to delete', type: 'string' },
      },
      required: ['id'],
      nullable: false,
    },
  }),
  _PetController.deletePet
);

export { router as generatedRoutes };
